library(DESeq2)
library(tidyverse)
library(ggfortify)
library(ggtext)
library(ggpubr)
library(dplyr)


#load raw data ----
count_matrix_path <- read.table("C:/Users/bop21gwh/bioinformatics/salmon.gene.counts.matrix")
head(count_matrix_path)
sample_info <- read.csv("C:/Users/bop21gwh/Documents/PhD work/genomics/H.m/sample_info_with_sample_id.csv", row.names = NULL)
# extract colnames to change count matrix colnames
# new
head(sample_info)


dds_all <- DESeqDataSetFromMatrix(round(count_matrix_path), colData = sample_info, design = ~sample_id)
dds_all <- estimateSizeFactors(dds_all)



############ plotPCA.san is the function containing all the code below

plotPCA.san <- function (object, intgroup = "condition", ntop = 500, returnData = FALSE) {
  rv <- rowVars(assay(object))
  select <- order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
  pca <- prcomp(t(assay(object)[select, ]))
  percentVar <- pca$sdev^2/sum(pca$sdev^2)
  
  if (!all(intgroup %in% names(colData(object)))) {
    stop("The argument 'intgroup' should specify columns of colData(dds)")
  }
  
  intgroup.df <- as.data.frame(colData(object)[, intgroup, drop = FALSE])
  group <- if (length(intgroup) > 1) {
    factor(apply(intgroup.df, 1, paste, collapse = " : "))
  } else {
    colData(object)[[intgroup]]
  }
  
  d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], PC3 = pca$x[, 3], group = group, intgroup.df, name = colnames(object))
  
  if (returnData) {
    attr(d, "percentVar") <- percentVar[1:3]
    return(d)
  }
  
  ggplot(data = d, aes_string(x = "PC1", y = "PC2", color = "group", label = "name")) +
    geom_point(size = 3) +
    geom_text_repel(size = 3) +
    xlab(paste0("PC1: ", round(percentVar[1] * 100), "% variance")) +
    ylab(paste0("PC2: ", round(percentVar[2] * 100), "% variance")) +
    ggtitle(paste0("PC1 vs PC2 vs PC3: ", round(percentVar[3] * 100), "% variance"))
}


print(plotPCA.san)


############### try the function
# Assuming you have a DESeqDataSet object named dds_all
# Replace 'sample_id' with your desired grouping variable
pca_data <- plotPCA.san(dds_all, intgroup = 'sample_id', ntop = 500, returnData = TRUE)

# Plot the PCA
plot(pca_data$PC2, pca_data$PC3, col = pca_data$group)

